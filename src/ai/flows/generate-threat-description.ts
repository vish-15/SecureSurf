// This is an autogenerated file from running `firebase genkit:flow`.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for generating a human-readable description of identified threats in a URL.
 *
 * - generateThreatDescription - A function that takes a URL and analysis results as input and returns a threat description.
 * - GenerateThreatDescriptionInput - The input type for the generateThreatDescription function.
 * - GenerateThreatDescriptionOutput - The return type for the generateThreatDescription function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateThreatDescriptionInputSchema = z.object({
  url: z.string().describe('The URL to analyze.'),
  analysisResults: z
    .string()
    .describe('The analysis results from the URL content analyzer.'),
});
export type GenerateThreatDescriptionInput = z.infer<
  typeof GenerateThreatDescriptionInputSchema
>;

const GenerateThreatDescriptionOutputSchema = z.object({
  threatDescription: z
    .string()
    .describe(
      'A concise, human-readable description of the identified threats.'
    ),
});
export type GenerateThreatDescriptionOutput = z.infer<
  typeof GenerateThreatDescriptionOutputSchema
>;

export async function generateThreatDescription(
  input: GenerateThreatDescriptionInput
): Promise<GenerateThreatDescriptionOutput> {
  return generateThreatDescriptionFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateThreatDescriptionPrompt',
  input: {schema: GenerateThreatDescriptionInputSchema},
  output: {schema: GenerateThreatDescriptionOutputSchema},
  prompt: `You are an AI assistant that analyzes security scan results and converts them into a human-readable format. Convert the following analysis of URL {{{url}}} into human-readable threat description: {{{analysisResults}}}`,
});

const generateThreatDescriptionFlow = ai.defineFlow(
  {
    name: 'generateThreatDescriptionFlow',
    inputSchema: GenerateThreatDescriptionInputSchema,
    outputSchema: GenerateThreatDescriptionOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
